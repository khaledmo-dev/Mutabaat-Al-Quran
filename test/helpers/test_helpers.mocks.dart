// Mocks generated by Mockito 5.4.4 from annotations
// in quran_test/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:ui' as _i8;

import 'package:flutter/material.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:quran_test/data/database.dart' as _i2;
import 'package:quran_test/data/models/models.dart' as _i10;
import 'package:quran_test/services/activity_service.dart' as _i12;
import 'package:quran_test/services/flash_message_service.dart' as _i17;
import 'package:quran_test/services/local_storage_service.dart' as _i16;
import 'package:quran_test/services/localization_service.dart' as _i15;
import 'package:quran_test/services/result_service.dart' as _i13;
import 'package:quran_test/services/table_service.dart' as _i9;
import 'package:quran_test/services/template_service.dart' as _i14;
import 'package:quran_test/services/test_service.dart' as _i11;
import 'package:shared_preferences/shared_preferences.dart' as _i3;
import 'package:stacked_services/stacked_services.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _Fake$AyatTable_0 extends _i1.SmartFake implements _i2.$AyatTable {
  _Fake$AyatTable_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$EntriesTable_1 extends _i1.SmartFake implements _i2.$EntriesTable {
  _Fake$EntriesTable_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$ActivitiesTable_2 extends _i1.SmartFake
    implements _i2.$ActivitiesTable {
  _Fake$ActivitiesTable_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$ActivitySchedulesTable_3 extends _i1.SmartFake
    implements _i2.$ActivitySchedulesTable {
  _Fake$ActivitySchedulesTable_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$TemplatesTable_4 extends _i1.SmartFake
    implements _i2.$TemplatesTable {
  _Fake$TemplatesTable_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$TemplateSegmentsTable_5 extends _i1.SmartFake
    implements _i2.$TemplateSegmentsTable {
  _Fake$TemplateSegmentsTable_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSharedPreferences_6 extends _i1.SmartFake
    implements _i3.SharedPreferences {
  _FakeSharedPreferences_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i4.NavigationService {
  @override
  String get previousRoute => (super.noSuchMethod(
        Invocation.getter(#previousRoute),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#previousRoute),
        ),
        returnValueForMissingStub: _i5.dummyValue<String>(
          this,
          Invocation.getter(#previousRoute),
        ),
      ) as String);

  @override
  String get currentRoute => (super.noSuchMethod(
        Invocation.getter(#currentRoute),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#currentRoute),
        ),
        returnValueForMissingStub: _i5.dummyValue<String>(
          this,
          Invocation.getter(#currentRoute),
        ),
      ) as String);

  @override
  _i6.GlobalKey<_i6.NavigatorState>? nestedNavigationKey(int? index) =>
      (super.noSuchMethod(
        Invocation.method(
          #nestedNavigationKey,
          [index],
        ),
        returnValueForMissingStub: null,
      ) as _i6.GlobalKey<_i6.NavigatorState>?);

  @override
  void config({
    bool? enableLog,
    bool? defaultPopGesture,
    bool? defaultOpaqueRoute,
    Duration? defaultDurationTransition,
    bool? defaultGlobalState,
    _i4.Transition? defaultTransitionStyle,
    String? defaultTransition,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #config,
          [],
          {
            #enableLog: enableLog,
            #defaultPopGesture: defaultPopGesture,
            #defaultOpaqueRoute: defaultOpaqueRoute,
            #defaultDurationTransition: defaultDurationTransition,
            #defaultGlobalState: defaultGlobalState,
            #defaultTransitionStyle: defaultTransitionStyle,
            #defaultTransition: defaultTransition,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<T?>? navigateWithTransition<T>(
    _i6.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i6.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i4.Transition? transitionClass,
    _i4.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateWithTransition,
          [page],
          {
            #opaque: opaque,
            #transition: transition,
            #duration: duration,
            #popGesture: popGesture,
            #id: id,
            #curve: curve,
            #fullscreenDialog: fullscreenDialog,
            #preventDuplicates: preventDuplicates,
            #transitionClass: transitionClass,
            #transitionStyle: transitionStyle,
            #routeName: routeName,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i7.Future<T?>?);

  @override
  _i7.Future<T?>? replaceWithTransition<T>(
    _i6.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i6.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i4.Transition? transitionClass,
    _i4.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWithTransition,
          [page],
          {
            #opaque: opaque,
            #transition: transition,
            #duration: duration,
            #popGesture: popGesture,
            #id: id,
            #curve: curve,
            #fullscreenDialog: fullscreenDialog,
            #preventDuplicates: preventDuplicates,
            #transitionClass: transitionClass,
            #transitionStyle: transitionStyle,
            #routeName: routeName,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i7.Future<T?>?);

  @override
  bool back<T>({
    dynamic result,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #back,
          [],
          {
            #result: result,
            #id: id,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void popUntil(
    _i6.RoutePredicate? predicate, {
    int? id,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #popUntil,
          [predicate],
          {#id: id},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void popRepeated(int? popTimes) => super.noSuchMethod(
        Invocation.method(
          #popRepeated,
          [popTimes],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<T?>? navigateTo<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i6.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateTo,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
            #transition: transition,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i7.Future<T?>?);

  @override
  _i7.Future<T?>? navigateToView<T>(
    _i6.Widget? view, {
    dynamic arguments,
    int? id,
    bool? opaque,
    _i6.Curve? curve,
    Duration? duration,
    bool? fullscreenDialog = false,
    bool? popGesture,
    bool? preventDuplicates = true,
    _i4.Transition? transition,
    _i4.Transition? transitionStyle,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateToView,
          [view],
          {
            #arguments: arguments,
            #id: id,
            #opaque: opaque,
            #curve: curve,
            #duration: duration,
            #fullscreenDialog: fullscreenDialog,
            #popGesture: popGesture,
            #preventDuplicates: preventDuplicates,
            #transition: transition,
            #transitionStyle: transitionStyle,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i7.Future<T?>?);

  @override
  _i7.Future<T?>? replaceWith<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i6.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWith,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
            #transition: transition,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i7.Future<T?>?);

  @override
  _i7.Future<T?>? clearStackAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShow,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i7.Future<T?>?);

  @override
  _i7.Future<T?>? clearStackAndShowView<T>(
    _i6.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShowView,
          [view],
          {
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i7.Future<T?>?);

  @override
  _i7.Future<T?>? clearTillFirstAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTillFirstAndShow,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i7.Future<T?>?);

  @override
  _i7.Future<T?>? clearTillFirstAndShowView<T>(
    _i6.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTillFirstAndShowView,
          [view],
          {
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i7.Future<T?>?);

  @override
  _i7.Future<T?>? pushNamedAndRemoveUntil<T>(
    String? routeName, {
    _i6.RoutePredicate? predicate,
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushNamedAndRemoveUntil,
          [routeName],
          {
            #predicate: predicate,
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i7.Future<T?>?);
}

/// A class which mocks [BottomSheetService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBottomSheetService extends _i1.Mock
    implements _i4.BottomSheetService {
  @override
  void setCustomSheetBuilders(Map<dynamic, _i4.SheetBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #setCustomSheetBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<_i4.SheetResponse<dynamic>?> showBottomSheet({
    required String? title,
    String? description,
    String? confirmButtonTitle = r'Ok',
    String? cancelButtonTitle,
    bool? enableDrag = true,
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
    double? elevation = 1.0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showBottomSheet,
          [],
          {
            #title: title,
            #description: description,
            #confirmButtonTitle: confirmButtonTitle,
            #cancelButtonTitle: cancelButtonTitle,
            #enableDrag: enableDrag,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
            #elevation: elevation,
          },
        ),
        returnValue: _i7.Future<_i4.SheetResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i7.Future<_i4.SheetResponse<dynamic>?>.value(),
      ) as _i7.Future<_i4.SheetResponse<dynamic>?>);

  @override
  _i7.Future<_i4.SheetResponse<T>?> showCustomSheet<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i8.Color? barrierColor = const _i8.Color(2315255808),
    double? elevation = 1.0,
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    String? barrierLabel = r'',
    dynamic customData,
    R? data,
    bool? enableDrag = true,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomSheet,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #elevation: elevation,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #barrierLabel: barrierLabel,
            #customData: customData,
            #data: data,
            #enableDrag: enableDrag,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
          },
        ),
        returnValue: _i7.Future<_i4.SheetResponse<T>?>.value(),
        returnValueForMissingStub: _i7.Future<_i4.SheetResponse<T>?>.value(),
      ) as _i7.Future<_i4.SheetResponse<T>?>);

  @override
  void completeSheet(_i4.SheetResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeSheet,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DialogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDialogService extends _i1.Mock implements _i4.DialogService {
  @override
  void registerCustomDialogBuilders(
          Map<dynamic, _i4.DialogBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void registerCustomDialogBuilder({
    required dynamic variant,
    required _i6.Widget Function(
      _i6.BuildContext,
      _i4.DialogRequest<dynamic>,
      dynamic Function(_i4.DialogResponse<dynamic>),
    )? builder,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilder,
          [],
          {
            #variant: variant,
            #builder: builder,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<_i4.DialogResponse<dynamic>?> showDialog({
    String? title,
    String? description,
    String? cancelTitle,
    _i8.Color? cancelTitleColor,
    String? buttonTitle = r'Ok',
    _i8.Color? buttonTitleColor,
    bool? barrierDismissible = false,
    _i6.RouteSettings? routeSettings,
    _i6.GlobalKey<_i6.NavigatorState>? navigatorKey,
    _i4.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #buttonTitle: buttonTitle,
            #buttonTitleColor: buttonTitleColor,
            #barrierDismissible: barrierDismissible,
            #routeSettings: routeSettings,
            #navigatorKey: navigatorKey,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i7.Future<_i4.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i7.Future<_i4.DialogResponse<dynamic>?>.value(),
      ) as _i7.Future<_i4.DialogResponse<dynamic>?>);

  @override
  _i7.Future<_i4.DialogResponse<T>?> showCustomDialog<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i8.Color? barrierColor = const _i8.Color(2315255808),
    bool? barrierDismissible = false,
    String? barrierLabel = r'',
    bool? useSafeArea = true,
    _i6.RouteSettings? routeSettings,
    _i6.GlobalKey<_i6.NavigatorState>? navigatorKey,
    _i6.RouteTransitionsBuilder? transitionBuilder,
    dynamic customData,
    R? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomDialog,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #barrierDismissible: barrierDismissible,
            #barrierLabel: barrierLabel,
            #useSafeArea: useSafeArea,
            #routeSettings: routeSettings,
            #navigatorKey: navigatorKey,
            #transitionBuilder: transitionBuilder,
            #customData: customData,
            #data: data,
          },
        ),
        returnValue: _i7.Future<_i4.DialogResponse<T>?>.value(),
        returnValueForMissingStub: _i7.Future<_i4.DialogResponse<T>?>.value(),
      ) as _i7.Future<_i4.DialogResponse<T>?>);

  @override
  _i7.Future<_i4.DialogResponse<dynamic>?> showConfirmationDialog({
    String? title,
    String? description,
    String? cancelTitle = r'Cancel',
    _i8.Color? cancelTitleColor,
    String? confirmationTitle = r'Ok',
    _i8.Color? confirmationTitleColor,
    bool? barrierDismissible = false,
    _i6.RouteSettings? routeSettings,
    _i4.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showConfirmationDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #confirmationTitle: confirmationTitle,
            #confirmationTitleColor: confirmationTitleColor,
            #barrierDismissible: barrierDismissible,
            #routeSettings: routeSettings,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i7.Future<_i4.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i7.Future<_i4.DialogResponse<dynamic>?>.value(),
      ) as _i7.Future<_i4.DialogResponse<dynamic>?>);

  @override
  void completeDialog(_i4.DialogResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeDialog,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TableService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTableService extends _i1.Mock implements _i9.TableService {
  @override
  _i2.$AyatTable get ayatTable => (super.noSuchMethod(
        Invocation.getter(#ayatTable),
        returnValue: _Fake$AyatTable_0(
          this,
          Invocation.getter(#ayatTable),
        ),
        returnValueForMissingStub: _Fake$AyatTable_0(
          this,
          Invocation.getter(#ayatTable),
        ),
      ) as _i2.$AyatTable);

  @override
  _i2.$EntriesTable get entriesTable => (super.noSuchMethod(
        Invocation.getter(#entriesTable),
        returnValue: _Fake$EntriesTable_1(
          this,
          Invocation.getter(#entriesTable),
        ),
        returnValueForMissingStub: _Fake$EntriesTable_1(
          this,
          Invocation.getter(#entriesTable),
        ),
      ) as _i2.$EntriesTable);

  @override
  _i2.$ActivitiesTable get activitiesTable => (super.noSuchMethod(
        Invocation.getter(#activitiesTable),
        returnValue: _Fake$ActivitiesTable_2(
          this,
          Invocation.getter(#activitiesTable),
        ),
        returnValueForMissingStub: _Fake$ActivitiesTable_2(
          this,
          Invocation.getter(#activitiesTable),
        ),
      ) as _i2.$ActivitiesTable);

  @override
  _i2.$ActivitySchedulesTable get activitySchedulesTable => (super.noSuchMethod(
        Invocation.getter(#activitySchedulesTable),
        returnValue: _Fake$ActivitySchedulesTable_3(
          this,
          Invocation.getter(#activitySchedulesTable),
        ),
        returnValueForMissingStub: _Fake$ActivitySchedulesTable_3(
          this,
          Invocation.getter(#activitySchedulesTable),
        ),
      ) as _i2.$ActivitySchedulesTable);

  @override
  _i7.Future<dynamic> reorderActivities(List<_i10.ActivityModel>? activities) =>
      (super.noSuchMethod(
        Invocation.method(
          #reorderActivities,
          [activities],
        ),
        returnValue: _i7.Future<dynamic>.value(),
        returnValueForMissingStub: _i7.Future<dynamic>.value(),
      ) as _i7.Future<dynamic>);

  @override
  _i7.Future<dynamic> insertEntries({
    required List<Map<dynamic, dynamic>>? entries,
    required DateTime? date,
    required int? activityId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertEntries,
          [],
          {
            #entries: entries,
            #date: date,
            #activityId: activityId,
          },
        ),
        returnValue: _i7.Future<dynamic>.value(),
        returnValueForMissingStub: _i7.Future<dynamic>.value(),
      ) as _i7.Future<dynamic>);

  @override
  _i7.Stream<List<_i10.ActivityModel>> watchActivities(
          {required List<DateTime>? range}) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchActivities,
          [],
          {#range: range},
        ),
        returnValue: _i7.Stream<List<_i10.ActivityModel>>.empty(),
        returnValueForMissingStub: _i7.Stream<List<_i10.ActivityModel>>.empty(),
      ) as _i7.Stream<List<_i10.ActivityModel>>);
}

/// A class which mocks [TestService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTestService extends _i1.Mock implements _i11.TestService {
  @override
  _i7.Future<int> recordTestResult({
    int? templateId,
    required List<_i2.AnswersCompanion>? resultAnwers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordTestResult,
          [],
          {
            #templateId: templateId,
            #resultAnwers: resultAnwers,
          },
        ),
        returnValue: _i7.Future<int>.value(0),
        returnValueForMissingStub: _i7.Future<int>.value(0),
      ) as _i7.Future<int>);

  @override
  _i7.Future<List<int>> getCustomExamRange(
          List<Map<dynamic, dynamic>>? records) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCustomExamRange,
          [records],
        ),
        returnValue: _i7.Future<List<int>>.value(<int>[]),
        returnValueForMissingStub: _i7.Future<List<int>>.value(<int>[]),
      ) as _i7.Future<List<int>>);

  @override
  _i7.Future<List<_i2.Ayah>> getQuestion(List<int>? range) =>
      (super.noSuchMethod(
        Invocation.method(
          #getQuestion,
          [range],
        ),
        returnValue: _i7.Future<List<_i2.Ayah>>.value(<_i2.Ayah>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i2.Ayah>>.value(<_i2.Ayah>[]),
      ) as _i7.Future<List<_i2.Ayah>>);
}

/// A class which mocks [ActivityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockActivityService extends _i1.Mock implements _i12.ActivityService {
  @override
  _i2.$ActivitiesTable get activitiesTable => (super.noSuchMethod(
        Invocation.getter(#activitiesTable),
        returnValue: _Fake$ActivitiesTable_2(
          this,
          Invocation.getter(#activitiesTable),
        ),
        returnValueForMissingStub: _Fake$ActivitiesTable_2(
          this,
          Invocation.getter(#activitiesTable),
        ),
      ) as _i2.$ActivitiesTable);

  @override
  _i2.$ActivitySchedulesTable get activitySchedulesTable => (super.noSuchMethod(
        Invocation.getter(#activitySchedulesTable),
        returnValue: _Fake$ActivitySchedulesTable_3(
          this,
          Invocation.getter(#activitySchedulesTable),
        ),
        returnValueForMissingStub: _Fake$ActivitySchedulesTable_3(
          this,
          Invocation.getter(#activitySchedulesTable),
        ),
      ) as _i2.$ActivitySchedulesTable);

  @override
  dynamic deleteActivity(int? id) => super.noSuchMethod(
        Invocation.method(
          #deleteActivity,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Stream<_i10.ActivityModel> watchActivity(int? id) => (super.noSuchMethod(
        Invocation.method(
          #watchActivity,
          [id],
        ),
        returnValue: _i7.Stream<_i10.ActivityModel>.empty(),
        returnValueForMissingStub: _i7.Stream<_i10.ActivityModel>.empty(),
      ) as _i7.Stream<_i10.ActivityModel>);

  @override
  void upsertActivity({
    required _i2.ActivitiesCompanion? activity,
    required List<int>? scheduleDays,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #upsertActivity,
          [],
          {
            #activity: activity,
            #scheduleDays: scheduleDays,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Stream<List<_i10.SlotModel>> watchActivitySlots({
    required int? id,
    required List<DateTime>? range,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchActivitySlots,
          [],
          {
            #id: id,
            #range: range,
          },
        ),
        returnValue: _i7.Stream<List<_i10.SlotModel>>.empty(),
        returnValueForMissingStub: _i7.Stream<List<_i10.SlotModel>>.empty(),
      ) as _i7.Stream<List<_i10.SlotModel>>);
}

/// A class which mocks [ResultService].
///
/// See the documentation for Mockito's code generation for more information.
class MockResultService extends _i1.Mock implements _i13.ResultService {
  @override
  dynamic deleteResult(int? id) => super.noSuchMethod(
        Invocation.method(
          #deleteResult,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Stream<List<_i10.ResultModel>> watchResults() => (super.noSuchMethod(
        Invocation.method(
          #watchResults,
          [],
        ),
        returnValue: _i7.Stream<List<_i10.ResultModel>>.empty(),
        returnValueForMissingStub: _i7.Stream<List<_i10.ResultModel>>.empty(),
      ) as _i7.Stream<List<_i10.ResultModel>>);

  @override
  _i7.Future<List<_i10.AnswerModel>> getResultAnswers(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getResultAnswers,
          [id],
        ),
        returnValue:
            _i7.Future<List<_i10.AnswerModel>>.value(<_i10.AnswerModel>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i10.AnswerModel>>.value(<_i10.AnswerModel>[]),
      ) as _i7.Future<List<_i10.AnswerModel>>);
}

/// A class which mocks [TemplateService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTemplateService extends _i1.Mock implements _i14.TemplateService {
  @override
  _i2.$AyatTable get ayatTable => (super.noSuchMethod(
        Invocation.getter(#ayatTable),
        returnValue: _Fake$AyatTable_0(
          this,
          Invocation.getter(#ayatTable),
        ),
        returnValueForMissingStub: _Fake$AyatTable_0(
          this,
          Invocation.getter(#ayatTable),
        ),
      ) as _i2.$AyatTable);

  @override
  _i2.$TemplatesTable get templatesTable => (super.noSuchMethod(
        Invocation.getter(#templatesTable),
        returnValue: _Fake$TemplatesTable_4(
          this,
          Invocation.getter(#templatesTable),
        ),
        returnValueForMissingStub: _Fake$TemplatesTable_4(
          this,
          Invocation.getter(#templatesTable),
        ),
      ) as _i2.$TemplatesTable);

  @override
  _i2.$TemplateSegmentsTable get segmentsTable => (super.noSuchMethod(
        Invocation.getter(#segmentsTable),
        returnValue: _Fake$TemplateSegmentsTable_5(
          this,
          Invocation.getter(#segmentsTable),
        ),
        returnValueForMissingStub: _Fake$TemplateSegmentsTable_5(
          this,
          Invocation.getter(#segmentsTable),
        ),
      ) as _i2.$TemplateSegmentsTable);

  @override
  dynamic deleteTemplate(int? id) => super.noSuchMethod(
        Invocation.method(
          #deleteTemplate,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> insertTemplate(
    String? name,
    List<Map<dynamic, dynamic>>? records,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertTemplate,
          [
            name,
            records,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Stream<List<_i10.TemplateModel>> watchTemplates() => (super.noSuchMethod(
        Invocation.method(
          #watchTemplates,
          [],
        ),
        returnValue: _i7.Stream<List<_i10.TemplateModel>>.empty(),
        returnValueForMissingStub: _i7.Stream<List<_i10.TemplateModel>>.empty(),
      ) as _i7.Stream<List<_i10.TemplateModel>>);
}

/// A class which mocks [LocalizationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalizationService extends _i1.Mock
    implements _i15.LocalizationService {
  @override
  _i7.Future<void> load(String? lang) => (super.noSuchMethod(
        Invocation.method(
          #load,
          [lang],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> changeLanguage(String? lang) => (super.noSuchMethod(
        Invocation.method(
          #changeLanguage,
          [lang],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [LocalStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorageService extends _i1.Mock
    implements _i16.LocalStorageService {
  @override
  _i3.SharedPreferences get sharedPreferences => (super.noSuchMethod(
        Invocation.getter(#sharedPreferences),
        returnValue: _FakeSharedPreferences_6(
          this,
          Invocation.getter(#sharedPreferences),
        ),
        returnValueForMissingStub: _FakeSharedPreferences_6(
          this,
          Invocation.getter(#sharedPreferences),
        ),
      ) as _i3.SharedPreferences);

  @override
  set sharedPreferences(_i3.SharedPreferences? _sharedPreferences) =>
      super.noSuchMethod(
        Invocation.setter(
          #sharedPreferences,
          _sharedPreferences,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isDark => (super.noSuchMethod(
        Invocation.getter(#isDark),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set isDark(bool? isDark) => super.noSuchMethod(
        Invocation.setter(
          #isDark,
          isDark,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get lang => (super.noSuchMethod(
        Invocation.getter(#lang),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#lang),
        ),
        returnValueForMissingStub: _i5.dummyValue<String>(
          this,
          Invocation.getter(#lang),
        ),
      ) as String);

  @override
  set lang(String? lang) => super.noSuchMethod(
        Invocation.setter(
          #lang,
          lang,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isHijri => (super.noSuchMethod(
        Invocation.getter(#isHijri),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set isHijri(bool? isHijri) => super.noSuchMethod(
        Invocation.setter(
          #isHijri,
          isHijri,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasRated => (super.noSuchMethod(
        Invocation.getter(#hasRated),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set hasRated(bool? hasRated) => super.noSuchMethod(
        Invocation.setter(
          #hasRated,
          hasRated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set rateDate(String? rateDate) => super.noSuchMethod(
        Invocation.setter(
          #rateDate,
          rateDate,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get listenersCount => (super.noSuchMethod(
        Invocation.getter(#listenersCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i7.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
        Invocation.method(
          #listenToReactiveValues,
          [reactiveValues],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FlashMessageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlashMessageService extends _i1.Mock
    implements _i17.FlashMessageService {}
